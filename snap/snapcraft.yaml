name: ubuntu-kr-qr-kiosk
version: 0.1.0
summary: Kiosk app for Ubuntu KR event QR Check in
description: Kiosk app for Ubuntu KR event QR Check in
compression: lzo

confinement: strict
base: core22
grade: stable

plugs:
  graphics-core22:
    interface: content
    target: $SNAP/graphics
    default-provider: mesa-core22

layout:
  /usr/share/libdrm:
    bind: $SNAP/graphics/libdrm
  /usr/share/drirc.d:
    symlink: $SNAP/graphics/drirc.d

slots:
  dbus-ubuntu-kr-qr-kiosk: # adjust accordingly to your app name
    interface: dbus
    bus: session
    name: org.ubuntu-kr.kiosk # adjust accordingly to your app name and
    
apps:
  ubuntu-kr-qr-kiosk:
    command-chain: &_command-chain
    - bin/graphics-core22-wrapper
    - bin/wayland-launch
    command: &_command bin/ubuntu_kr_qr_kiosk
    # extensions: [flutter-master] # Where "master" defines which Flutter channel to use for the build
    extensions: [gnome] 
    plugs: &_plugs
    - opengl
    - wayland
    - network
    - raw-usb
    - camera
    - home
    slots:
      - dbus-ubuntu-kr-qr-kiosk
    environment: &_environment
      XDG_DATA_HOME: $SNAP_USER_DATA
      XDG_DATA_DIRS: $SNAP/usr/share
      GDK_GL: gles

  daemon:
    daemon: simple
    restart-delay: 3s
    restart-condition: always
    command-chain: *_command-chain
    command: *_command
    plugs: *_plugs
    environment: *_environment

parts:
  flutter-git:
    source: https://github.com/flutter/flutter.git
    source-tag: 3.10.5
    source-depth: 1
    plugin: nil
    override-build: |
      mkdir -p $CRAFT_PART_INSTALL/usr/bin
      mkdir -p $CRAFT_PART_INSTALL/usr/libexec
      cp -r $CRAFT_PART_SRC $CRAFT_PART_INSTALL/usr/libexec/flutter
      ln -s $CRAFT_PART_INSTALL/usr/libexec/flutter/bin/flutter $CRAFT_PART_INSTALL/usr/bin/flutter
      $CRAFT_PART_INSTALL/usr/bin/flutter doctor
    build-packages:
      - clang
      - cmake
      - curl
      - libgtk-3-dev
      - ninja-build
      - unzip
      - xz-utils
      - zip
    override-prime: ''

  ubuntu-kr-qr-kiosk:
    after: [flutter-git]
    source: .
    source-type: git
    plugin: nil
    # plugin: flutter
    # flutter-target: lib/main.dart # The main entry-point file of the application
    build-packages:
      - libusb-1.0-0-dev
      - libsqlite3-dev
      - libgstreamer1.0-dev
      - libgstreamer-plugins-base1.0-dev
      - libgstreamer-plugins-good1.0-dev
      - libgstreamer-plugins-bad1.0-dev
    stage-packages:
      - libusb-1.0-0
      - gstreamer1.0-libav
      - gstreamer1.0-plugins-base
      - gstreamer1.0-plugins-good
      - gstreamer1.0-plugins-bad
      - gstreamer1.0-x
      - gstreamer1.0-alsa
      - gstreamer1.0-gl
      - gstreamer1.0-gtk3
      - gstreamer1.0-qt5
      - gstreamer1.0-pulseaudio
      - libgtk-3-0
      - libgl1
      # - libdrm-common
    override-build: |
      set -eux
      mkdir -p $CRAFT_PART_INSTALL/bin/lib
      flutter pub get
      flutter build linux --release -v
      cp -r build/linux/*/release/bundle/* $CRAFT_PART_INSTALL/bin/

  # Some utility scripts for setting up the Wayland environment
  setup:
    plugin: dump
    source: wayland-launch
    override-build: |
      # The plugs needed to run Wayland. (wayland-launch checks them, setup.sh connects them)
      # You may add further plugs here if you want these options
      PLUGS="opengl wayland graphics-core22"
      sed --in-place "s/%PLUGS%/$PLUGS/g" $CRAFT_PART_BUILD/bin/wayland-launch
      sed --in-place "s/%PLUGS%/$PLUGS/g" $CRAFT_PART_BUILD/bin/setup.sh
      craftctl default
    stage-packages:
      - inotify-tools

  graphics-core22:
    after:
      - ubuntu-kr-qr-kiosk
      - setup
    source: https://github.com/MirServer/graphics-core22.git
    plugin: dump
    override-prime: |
      craftctl default
      ${CRAFT_PART_SRC}/bin/graphics-core22-cleanup mesa-core22 nvidia-core22
      cd "$CRAFT_PRIME/usr/share/"
      rm -rf bug drirc.d glvnd libdrm lintian man
      rm -rf applications apport bash-completion dbus-1 doc-base doc gtk-doc\
             help pkgconfig libthai metainfo themes thumbnailers xml
    prime:
      - bin/graphics-core22-wrapper

